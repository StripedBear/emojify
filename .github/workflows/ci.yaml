name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Yandex Cloud CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH
          export PATH="$PATH:$HOME/yandex-cloud/bin"
          echo "${{ secrets.YC_SERVICE_ACCOUNT_KEY }}" | base64 -d > /tmp/key.json
          yc config set service-account-key /tmp/key.json
          yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
          yc config set folder-id ${{ secrets.YC_FOLDER_ID }}

      - name: Log in to Yandex Cloud Container Registry
        run: |
          echo "${{ secrets.YC_SERVICE_ACCOUNT_KEY }}" > /tmp/key.json
          export PATH="$PATH:$HOME/yandex-cloud/bin"
          echo "${{ secrets.YC_TOKEN }}" | docker login --username oauth --password-stdin cr.yandex
          yc container registry configure-docker

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: cr.yandex/${{ secrets.YC_REGISTRY }}/emojify:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Yandex Cloud CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH
          export PATH="$PATH:$HOME/yandex-cloud/bin"
          echo "${{ secrets.YC_SERVICE_ACCOUNT_KEY }}" | base64 -d > /tmp/key.json
          yc config set service-account-key /tmp/key.json
          yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
          yc config set folder-id ${{ secrets.YC_FOLDER_ID }}

      - name: Get kubeconfig for Kubernetes
        run: |
          export PATH="$PATH:$HOME/yandex-cloud/bin"
          mkdir -p $HOME/.kube
          yc managed-kubernetes cluster get-credentials klust --external --force
          kubectl config view
          kubectl config current-context
          kubectl config use-context $(kubectl config current-context)

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Create Kubernetes Secret for Emojify
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          kubectl --kubeconfig=$HOME/.kube/config create secret generic emojify-secrets \
            --from-literal=SECRET_KEY="$SECRET_KEY" \
            --namespace default --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy MongoDB
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm upgrade --install mongodb bitnami/mongodb \
            --set auth.enabled=false \
            --set replicaSet.enabled=false \
            --set service.type=ClusterIP \
            --namespace default --kubeconfig=$HOME/.kube/config

      - name: Deploy Prometheus
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm upgrade --install prometheus prometheus-community/prometheus \
            -f ./emojify-chart/prometheus-values.yaml --kubeconfig=$HOME/.kube/config

      - name: Deploy Loki Stack (Loki, Promtail, Grafana)
        run: |
          helm repo add grafana https://grafana.github.io/helm-charts
          helm upgrade --install loki-stack grafana/loki-stack \
            --set grafana.enabled=true \
            --set promtail.enabled=true \
            --set loki.enabled=true \
            --set grafana.service.type=NodePort \
            --namespace default --kubeconfig=$HOME/.kube/config
         kubectl apply -f ,.emojify-chart/grafana-datasource.yaml

      - name: Deploy Emojify
        run: |
          helm upgrade --install emojify ./emojify-chart --kubeconfig=$HOME/.kube/config

